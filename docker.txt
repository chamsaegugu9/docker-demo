설명: 현재 실행 중인 컨테이너 목록을 표시합니다.
docker ps

설명: 실행 중이거나 종료된 모든 컨테이너를 표시합니다.
docker ps -a

설명: 새로운 컨테이너를 시작합니다. 이미지를 기반으로 컨테이너를 실행합니다.
docker run <이미지>
docker run --name <컨테이너 이름> <이미지 이름>
예시:
docker run -it ubuntu
docker run --name my-ubuntu-container -it ubuntu

옵션:
설명: 컨테이너를 백그라운드에서 실행합니다.
-d, --detach

설명: 인터랙티브 모드로 컨테이너를 실행하고 터미널에 연결합니다.
용도: 주로 터미널을 이용해 대화식으로 컨테이너에 접속할 때 사용합니다.
-i: 인터랙티브 모드로, 표준 입력을 활성화합니다.
-t: 터미널 모드로, 가상 터미널을 할당합니다.
-it

설명: 컨테이너에 이름을 지정합니다.
용도: 컨테이너에 고유한 이름을 부여하여 관리하고 식별하기 쉽게 합니다.
--name
예시:
docker run --name mycontainer ubuntu

설명: 컨테이너의 포트를 호스트와 매핑합니다.
용도: 컨테이너가 사용하는 포트를 호스트의 포트와 연결하여 외부에서 접근할 수 있게 합니다.
<호스트 포트>:<컨테이너 포트> 형식으로 사용합니다.
-p, --publish
예시:
docker run -p 8080:80 nginx

설명: 컨테이너에서 사용할 환경 변수를 설정합니다.
용도: 컨테이너가 실행될 때 필요한 환경 변수를 지정할 수 있습니다.
-e, --env
예시:
docker run -e MY_VAR=value ubuntu

설명: 볼륨을 컨테이너와 호스트 간에 마운트합니다.
용도: 호스트와 컨테이너 간에 데이터를 공유하거나 영속화할 때 사용합니다.
<호스트 경로>:<컨테이너 경로> 형식으로 사용합니다.
-v, --volume
예시:
docker run -v /host/data:/container/data ubuntu

설명: 
docker run --mount type=<type>,source=<source>,destination=<destination>,<options> my_image
type: 마운트 유형. volume, bind, tmpfs 중 하나를 선택합니다.
source: 마운트할 소스. 볼륨, 바인드 마운트, tmpfs의 경우 각기 다릅니다.
Volume의 경우, source는 볼륨의 이름입니다.
Bind Mount의 경우, source는 호스트 시스템의 파일 또는 디렉터리 경로입니다.
tmpfs의 경우, source는 tmpfs의 특성상 생략 가능합니다.
destination: 컨테이너 내에서 마운트될 경로입니다.
options: 선택적 매개변수. 예를 들어 readonly 같은 옵션을 통해 읽기 전용으로 마운트할 수 있습니다.
예시:
docker run --mount type=volume,source=my_volume,destination=/path/in/container my_image

docker volume create my_volume
docker run --mount type=volume,source=my_volume,destination=/data my_image

docker run --mount type=bind,source=/host/path,destination=/container/path my_image

docker run --mount type=tmpfs,destination=/path/in/container my_image

readonly 옵션
readonly 옵션은 마운트된 경로를 읽기 전용으로 설정할 수 있습니다. 이 옵션을 사용하면 컨테이너에서 해당 경로에 데이터를 쓸 수 없게 됩니다.
docker run --mount type=volume,source=my_volume,destination=/data,readonly my_image
readonly: 컨테이너 내에서 해당 경로가 읽기 전용으로 마운트됩니다.

nocopy 옵션
nocopy 옵션은 볼륨 마운트를 사용할 때, 호스트의 데이터가 컨테이너 내로 복사되지 않도록 할 수 있습니다. 기본적으로는 컨테이너가 시작될 때 볼륨이 존재하지 않으면 Docker가 빈 볼륨을 생성합니다. nocopy 옵션을 사용하면 이 복사 과정이 생략됩니다.
docker run --mount type=volume,source=my_volume,destination=/data,nocopy my_image
nocopy: 볼륨이 새로 생성될 때 호스트의 데이터를 복사하지 않습니다.

tmpfs-size 옵션 (tmpfs 전용)
tmpfs-size 옵션은 tmpfs 마운트에서 사용할 수 있는 메모리의 크기를 설정할 수 있습니다.
사용법:
docker run --mount type=tmpfs,destination=/tmp,tmpfs-size=64m my_image
tmpfs-size=64m: tmpfs에 할당할 메모리 크기를 64MB로 설정합니다.


설명: 컨테이너가 종료되면 자동으로 컨테이너를 삭제합니다.
용도: 일회성 테스트용 컨테이너를 실행할 때 유용합니다. 컨테이너가 종료되면 자동으로 삭제되어 관리가 용이합니다.
--rm
예시:
docker run --rm ubuntu

설명: 다른 컨테이너와의 네트워크 연결을 설정합니다. (주로 구버전에서 사용)
용도: 네트워크를 공유할 두 컨테이너 간의 연결을 설정할 때 사용됩니다. 그러나 Docker 네트워크가 발전하면서 --link는 더 이상 권장되지 않습니다.
--link
예시:
docker run --link other_container:alias ubuntu

설명: 컨테이너가 사용할 네트워크를 지정합니다.
용도: 컨테이너를 특정 네트워크에서 실행하거나, 별도의 네트워크를 생성해 연결할 때 사용됩니다.
--network
예시:
docker run --network my_network ubuntu

설명: 컨테이너가 종료되었을 때 자동 재시작 정책을 설정합니다.
no: 재시작하지 않음 (기본값)
always: 항상 재시작
unless-stopped: 수동으로 컨테이너를 중지하지 않는 이상 항상 재시작
on-failure: 실패 시에만 재시작 (옵션으로 실패 횟수도 설정 가능)
용도: 서비스가 종료되었을 때 자동으로 재시작을 원할 경우 사용합니다.
--restart
예시:
docker run --restart always nginx

설명: 컨테이너의 CPU 우선순위를 설정합니다.
용도: 여러 컨테이너가 동시에 실행되는 경우, CPU 리소스를 각 컨테이너에 할당할 수 있습니다.
--cpu-shares
예시:
docker run --cpu-shares 512 ubuntu

설명: 컨테이너에 할당할 메모리 제한을 설정합니다.
용도: 컨테이너가 사용할 수 있는 최대 메모리를 제한하고 싶을 때 사용합니다.
--memory
예시:
docker run --memory 512m ubuntu

설명: 컨테이너 내에서 실행할 사용자를 지정합니다.
용도: 컨테이너 내에서 특정 사용자로 실행하고 싶을 때 사용합니다.
--user
예시:
docker run --user 1000:1000 ubuntu

설명: 컨테이너의 /etc/hosts 파일에 추가적인 호스트 항목을 추가합니다.
용도: DNS나 호스트 이름을 수동으로 지정할 때 사용합니다.
--add-host
예시:
docker run --add-host example.com:192.168.1.100 ubuntu

설명: 컨테이너의 기본 실행 명령어를 변경합니다.
용도: 이미지의 기본 CMD나 ENTRYPOINT를 덮어쓰고 다른 명령어를 실행할 때 사용합니다.
--entrypoint
예시:
docker run --entrypoint /bin/bash ubuntu

설명: 실행 중인 컨테이너를 중지합니다.
docker stop <컨테이너_ID/이름>
예시:
docker stop my-container

설명: 컨테이너를 즉시 강제로 종료합니다.
docker kill <컨테이너_ID/이름>
예시:
docker kill my-container

설명: 중지된 컨테이너를 시작합니다.
docker start <컨테이너_ID/이름>
예시:
docker start my-container

설명: 중지된 컨테이너를 삭제합니다.
docker rm <컨테이너_ID/이름>
예시:
docker rm mycontainer

설명: 특정 파일을 컨테이너와 호스트 사이에서 복사할 수 있습니다.
docker cp <호스트 파일 경로> <컨테이너 이름>:/<컨테이너 경로>
예시:
docker cp /host/data/myfile.txt mycontainer:/container/data/myfile.txt

설명: 로컬에 저장된 Docker 이미지 목록을 표시합니다.
docker images

설명: Docker Hub 또는 지정된 레지스트리에서 이미지를 다운로드합니다.
docker pull <이미지>
예시:
docker pull ubuntu

설명: Dockerfile을 기반으로 이미지를 빌드합니다.
docker build -t <이미지_이름> <디렉토리>
예시:
docker build -t my-image .

설명: Docker 이미지를 삭제합니다. 이미지를 사용할 컨테이너가 없을 때만 삭제할 수 있습니다.
docker rmi <이미지_ID/이름>
예시:
docker rmi my-image

설명: 기존 이미지를 다른 이름이나 태그로 지정합니다.
docker tag <이미지_ID> <레포지토리_이름>:<태그>
예시:
docker tag my-image my-repo/my-image:latest

설명: Docker 네트워크 목록을 표시합니다.
docker network ls

설명: 새로운 Docker 네트워크를 생성합니다.
docker network create <네트워크_이름>
예시:
docker network create my-network

설명: 지정한 네트워크의 상세 정보를 확인합니다.
docker network inspect <네트워크_이름>
예시:
docker network inspect my-network

설명: 지정한 컨테이너를 네트워크에 연결합니다.
docker network connect <네트워크_이름> <컨테이너_ID/이름>
예시:
docker network connect my-network my-container

설명: 지정한 컨테이너를 네트워크에서 분리합니다.
docker network disconnect <네트워크_이름> <컨테이너_ID/이름>
예시:
docker network disconnect my-network my-container

설명: Docker 볼륨 목록을 표시합니다.
docker volume ls

설명: 새로운 Docker 볼륨을 생성합니다.
docker volume create <볼륨_이름>
예시:
docker volume create my-volume

설명: 특정 볼륨의 상세 정보를 확인합니다.
docker volume inspect <볼륨_이름>
예시:
docker volume inspect my-volume

설명: Docker 볼륨을 삭제합니다.
docker volume rm <볼륨_이름>
예시:
docker volume rm my-volume

설명: Docker의 시스템 정보를 표시합니다. Docker 엔진, 운영 체제, 저장소 및 네트워크 등의 정보가 출력됩니다.
docker info

설명: Docker의 클라이언트와 서버의 버전 정보를 표시합니다.
docker version

설명: 사용되지 않는 컨테이너, 네트워크, 이미지 및 볼륨을 정리하여 디스크 공간을 확보합니다.
docker system prune

설명: docker-compose.yml 파일에 정의된 서비스들을 실행합니다.
docker-compose up

설명: 실행 중인 모든 서비스를 중지하고 네트워크 및 볼륨을 삭제합니다.
docker-compose down

설명: docker-compose.yml 파일에 정의된 이미지들을 빌드합니다.
docker-compose build

설명: Docker Hub 또는 Docker 레지스트리에 로그인합니다.
docker login

설명: Docker Hub 또는 Docker 레지스트리에서 로그아웃합니다.
docker logout
