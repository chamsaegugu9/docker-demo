[Unit] 섹션
| 필드                     | 설명                                                    |
| ---------------------- | ----------------------------------------------------- |
| `Description`          | 서비스에 대한 간단한 설명.                                       |
| `After`                | 이 서비스가 어떤 유닛 이후에 시작되어야 하는지를 명시 (예: `network.target`). |
| `Requires`             | 지정된 유닛이 없으면 이 유닛도 중단됩니다. (종속성)                        |
| `Wants`                | `Requires`보다 약한 의존성. 유닛이 존재하면 실행 시 함께 시작되지만 없으면 무시.   |
| `Before`               | 이 서비스가 어떤 유닛보다 먼저 실행되어야 하는지를 명시.                      |
| `ConditionPathExists=` | 특정 파일/디렉터리가 있을 때만 실행.                                 |


[Service] 섹션
| 필드                  | 설명                                                                    |
| ------------------- | --------------------------------------------------------------------- |
| `ExecStart`         | 서비스를 시작할 때 실행할 명령어. **필수**                                            |
| `ExecStop`          | 서비스를 중단할 때 실행할 명령어.                                                   |
| `ExecReload`        | 서비스 재시작(reload) 시 실행할 명령어.                                            |
| `WorkingDirectory`  | 실행 시 사용할 작업 디렉터리.                                                     |
| `User`              | 해당 서비스를 실행할 사용자 계정.                                                   |
| `Group`             | 실행 시 사용할 그룹.                                                          |
| `Environment`       | 환경 변수 설정 (예: `Environment=SPRING_PROFILES_ACTIVE=prod`)               |
| `Restart`           | 서비스 실패 시 재시작 정책. `no`, `on-failure`, `always`, `on-abort` 등           |
| `RestartSec`        | 재시작 전 대기 시간 (초).                                                      |
| `SuccessExitStatus` | 종료 코드를 성공으로 간주할 수 있도록 지정 (예: `143`은 `SIGTERM`).                       |
| `TimeoutStartSec`   | 시작 명령어가 완료되기를 기다리는 시간.                                                |
| `TimeoutStopSec`    | 정지 명령어가 완료되기를 기다리는 시간.                                                |
| `StandardOutput`    | 표준 출력을 파일로 리디렉션. (`journal`, `null`, `tty`, `file:/path`)             |
| `StandardError`     | 표준 에러를 파일로 리디렉션.                                                      |
| `Type`              | 서비스 시작 유형. 일반적으로 `simple` (기본), `forking`, `oneshot`, `notify` 등이 있음. |
| `PIDFile`           | `forking` 타입에서 프로세스 PID를 저장할 파일 경로.                                   |


[Install] 섹션
| 필드           | 설명                                                          |
| ------------ | ----------------------------------------------------------- |
| `WantedBy`   | 이 서비스가 어느 타겟에 속하는지 명시. 예: `multi-user.target`은 일반 부팅 시 실행됨. |
| `RequiredBy` | 이 서비스가 없으면 실행되지 않아야 하는 타겟을 정의 (더 강한 의존성).                   |


서비스 유형 (Type) 상세 설명
| Type      | 설명                                      |
| --------- | --------------------------------------- |
| `simple`  | 기본값. `ExecStart`가 실행되면 서비스가 시작된 것으로 간주. |
| `forking` | 백그라운드로 포크하는 데몬용. PIDFile 필요.            |
| `oneshot` | 짧게 실행되는 명령어용. 보통 `ExecStart`만 실행하고 종료.  |
| `notify`  | 서비스가 준비 완료 상태임을 systemd에 알릴 수 있음.       |
| `idle`    | 다른 모든 작업이 끝날 때까지 대기 후 실행.               |


append: 접두어
StandardOutput=append:/home/ubuntu/logs/app.log
StandardError=append:/home/ubuntu/logs/app.log
여기서 append:는 기존 파일에 덧붙이는 모드입니다.
append: 사용 시 → 로그가 덮어쓰이지 않고 이어서 기록됩니다.
/home/ubuntu/logs/app.log 파일이 없으면 자동으로 생성됩니다 (권한만 충분하다면).

주요 포맷
| 옵션                    | 설명                         |
| --------------------- | -------------------------- |
| `journal` (기본값)       | 출력은 `journalctl` 로그에 기록됨   |
| `null`                | 출력을 무시 (버림)                |
| `tty`                 | 특정 TTY(터미널)로 출력            |
| `file:/path/to/log`   | 지정한 파일에 쓰되 **매번 덮어씀** ⚠    |
| `append:/path/to/log` | 지정한 파일에 **내용을 추가(append)** |



예시:
[Unit]
Description=My Spring Boot App
After=network.target

[Service]
Type=simple
User=ubuntu
ExecStart=/usr/bin/java -jar /home/ubuntu/app.jar
Restart=always
RestartSec=5
StandardOutput=append:/home/ubuntu/logs/app.log
StandardError=append:/home/ubuntu/logs/app.log

[Install]
WantedBy=multi-user.target
